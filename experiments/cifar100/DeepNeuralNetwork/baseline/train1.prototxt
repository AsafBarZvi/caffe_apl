name: "CIFAR10_full_train"
layers {
  name: "cifar"
  type: DATA
  top: "data"
  top: "label"
  data_param {
    source: "leveldb1/train-leveldb"
    mean_file: "mean.binaryproto"
    batch_size: 100
  }
}
#layers {
#  name: "drop0"
#  type: DROPOUT
#  bottom: "data"
#  top: "data"
#  dropout_param {
#    dropout_ratio: 0.1
#    is_input: false
#  }
#}
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  max_norm: 0
  max_norm: 0
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 96
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1_l"
}
layers {
  name: "drop1_c"
  type: DROPOUT
  bottom: "conv1_l"
  top: "conv1_l"
  dropout_param {
    dropout_ratio: 0.25
  }
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1_l"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "drop1"
  type: DROPOUT
  bottom: "pool1"
  top: "pool1_d"
  dropout_param {
    dropout_ratio: 0.25
  }
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "pool1_d"
  top: "conv2"
  max_norm: 0
  max_norm: 0
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2_l"
}
layers {
  name: "drop2_c"
  type: DROPOUT
  bottom: "conv2_l"
  top: "conv2_l"
  dropout_param {
    dropout_ratio: 0.25
  }
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2_l"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "drop2"
  type: DROPOUT
  bottom: "pool2"
  top: "pool2_d"
  dropout_param {
    dropout_ratio: 0.25
  }
}
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "pool2_d"
  top: "conv3"
  max_norm: 0
  max_norm: 0
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3_l"
}
layers {
  name: "drop3_c"
  type: DROPOUT
  bottom: "conv3_l"
  top: "conv3_l"
  dropout_param {
    dropout_ratio: 0.25
  }
}
layers {
  name: "pool3"
  type: POOLING
  bottom: "conv3_l"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "drop3"
  type: DROPOUT
  bottom: "pool3"
  top: "pool3_d"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "ip1"
  type: INNER_PRODUCT
  bottom: "pool3_d"
  top: "ip1"
  blobs_lr: 1
  blobs_lr: 1
  max_norm: 0
  max_norm: 0
  weight_decay: 1
  weight_decay: 1
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "ip1"
  top: "ip1_l"
}
layers {
  name: "dropip1"
  type: DROPOUT
  bottom: "ip1_l"
  top: "ip1_l"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "ip2"
  type: INNER_PRODUCT
  bottom: "ip1_l"
  top: "ip2"
  blobs_lr: 1
  blobs_lr: 1
  weight_decay: 1
  weight_decay: 1
  max_norm: 0
  max_norm: 0
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu5"
  type: RELU
  bottom: "ip2"
  top: "ip2_l"
}
layers {
  name: "dropip2"
  type: DROPOUT
  bottom: "ip2_l"
  top: "ip2_l"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "ip3"
  type: INNER_PRODUCT
  bottom: "ip2_l"
  top: "ip3"
  blobs_lr: 1
  blobs_lr: 1
  max_norm: 0
  max_norm: 0
  weight_decay: 1
  weight_decay: 1
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "loss"
  type: SOFTMAX_LOSS
  bottom: "ip3"
  bottom: "label"
}
